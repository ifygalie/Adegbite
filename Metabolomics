{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPytdz4Vjir0J3uamnsX8W6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ifygalie/Adegbite/blob/master/Metabolomics\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bOblos15M0MQ"
      },
      "outputs": [],
      "source": [
        "#import the necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Load data\n",
        "df = pd.read_csv('/content/metabomics.csv')"
      ],
      "metadata": {
        "id": "5bNxyAfTRwuz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#view data structure\n",
        "df.head() #shows the first five rows of data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "16He5eluR5B2",
        "outputId": "939d6a21-1d54-4582-c2f1-9f446cd48059"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         metabolites    wt_1    wt_2    wt_3  ...    ko_2    ko_3    ko_4    ko_5\n",
              "0            TSP_d6   0.0201  0.0201  0.0202  ...  0.0204  0.0201  0.0202  0.0201\n",
              "1     2_oxoglutarate  0.0378  0.0351  0.0354  ...  0.0728  0.0696  0.0637  0.0680\n",
              "2  3_Hydroxybutyrate  0.0058  0.0054  0.0053  ...  0.0052  0.0075  0.0051  0.0051\n",
              "3  3_methylhistidine  0.0042  0.0039  0.0047  ...  0.0043  0.0043  0.0035  0.0042\n",
              "4            acetate  0.0163  0.0172  0.0195  ...  0.0192  0.0255  0.0281  0.0205\n",
              "\n",
              "[5 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19a95a1a-9239-4814-89bc-46df68659deb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>metabolites</th>\n",
              "      <th>wt_1</th>\n",
              "      <th>wt_2</th>\n",
              "      <th>wt_3</th>\n",
              "      <th>wt_4</th>\n",
              "      <th>ko_1</th>\n",
              "      <th>ko_2</th>\n",
              "      <th>ko_3</th>\n",
              "      <th>ko_4</th>\n",
              "      <th>ko_5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TSP_d6</td>\n",
              "      <td>0.0201</td>\n",
              "      <td>0.0201</td>\n",
              "      <td>0.0202</td>\n",
              "      <td>0.0203</td>\n",
              "      <td>0.0201</td>\n",
              "      <td>0.0204</td>\n",
              "      <td>0.0201</td>\n",
              "      <td>0.0202</td>\n",
              "      <td>0.0201</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2_oxoglutarate</td>\n",
              "      <td>0.0378</td>\n",
              "      <td>0.0351</td>\n",
              "      <td>0.0354</td>\n",
              "      <td>0.0342</td>\n",
              "      <td>0.0656</td>\n",
              "      <td>0.0728</td>\n",
              "      <td>0.0696</td>\n",
              "      <td>0.0637</td>\n",
              "      <td>0.0680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3_Hydroxybutyrate</td>\n",
              "      <td>0.0058</td>\n",
              "      <td>0.0054</td>\n",
              "      <td>0.0053</td>\n",
              "      <td>0.0044</td>\n",
              "      <td>0.0049</td>\n",
              "      <td>0.0052</td>\n",
              "      <td>0.0075</td>\n",
              "      <td>0.0051</td>\n",
              "      <td>0.0051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3_methylhistidine</td>\n",
              "      <td>0.0042</td>\n",
              "      <td>0.0039</td>\n",
              "      <td>0.0047</td>\n",
              "      <td>0.0037</td>\n",
              "      <td>0.0037</td>\n",
              "      <td>0.0043</td>\n",
              "      <td>0.0043</td>\n",
              "      <td>0.0035</td>\n",
              "      <td>0.0042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>acetate</td>\n",
              "      <td>0.0163</td>\n",
              "      <td>0.0172</td>\n",
              "      <td>0.0195</td>\n",
              "      <td>0.0201</td>\n",
              "      <td>0.0212</td>\n",
              "      <td>0.0192</td>\n",
              "      <td>0.0255</td>\n",
              "      <td>0.0281</td>\n",
              "      <td>0.0205</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19a95a1a-9239-4814-89bc-46df68659deb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19a95a1a-9239-4814-89bc-46df68659deb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19a95a1a-9239-4814-89bc-46df68659deb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4331608b-3be2-418d-9fef-d059ee5c7915\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4331608b-3be2-418d-9fef-d059ee5c7915')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4331608b-3be2-418d-9fef-d059ee5c7915 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 89,\n  \"fields\": [\n    {\n      \"column\": \"metabolites\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 89,\n        \"samples\": [\n          \"inosine\",\n          \"myo_inositol\",\n          \"glucose_1_phosphate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07836423172657292,\n        \"min\": 0.0006,\n        \"max\": 0.6193,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          0.0121,\n          0.0201,\n          0.0539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09433975289344317,\n        \"min\": 0.0005,\n        \"max\": 0.8111,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.0367,\n          0.0201,\n          0.009\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10516158874413704,\n        \"min\": 0.0003,\n        \"max\": 0.924,\n        \"num_unique_values\": 82,\n        \"samples\": [\n          0.0032,\n          0.0202,\n          0.0902\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0911261774382345,\n        \"min\": 0.0004,\n        \"max\": 0.757,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          0.004,\n          0.0203,\n          0.0533\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06597222689628379,\n        \"min\": 0.0008,\n        \"max\": 0.3858,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          0.0763,\n          0.0201,\n          0.0024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06634191066993853,\n        \"min\": 0.0011,\n        \"max\": 0.3814,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.0378,\n          0.0204,\n          0.0031\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07234629400587195,\n        \"min\": 0.0012,\n        \"max\": 0.4711,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.3209,\n          0.0201,\n          0.0062\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0673027552037685,\n        \"min\": 0.0014,\n        \"max\": 0.3929,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          0.0281,\n          0.081,\n          0.0277\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0761325201675896,\n        \"min\": 0.00012,\n        \"max\": 0.4892,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.0032,\n          0.0201,\n          0.0497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape #tells the number of rows and columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WaprBku8S1o9",
        "outputId": "dc457c22-57fe-41c3-a8da-894fa94b86c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(89, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes #tells the type of numeric values in data (floats or integers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "alvMWaIHUbxy",
        "outputId": "c3f564b4-ed35-4045-9a26-9e5fd473e14b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "metabolites     object\n",
              "wt_1           float64\n",
              "wt_2           float64\n",
              "wt_3           float64\n",
              "wt_4           float64\n",
              "ko_1           float64\n",
              "ko_2           float64\n",
              "ko_3           float64\n",
              "ko_4           float64\n",
              "ko_5           float64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>metabolites</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_1</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_2</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_3</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_4</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_1</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_2</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_3</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_4</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_5</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum() #tells the total number of missing values in data"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xeS583yyUeY-",
        "outputId": "d10560a9-b451-4363-ebd5-117c310b18f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "metabolites    0\n",
              "wt_1           0\n",
              "wt_2           0\n",
              "wt_3           0\n",
              "wt_4           0\n",
              "ko_1           0\n",
              "ko_2           0\n",
              "ko_3           0\n",
              "ko_4           0\n",
              "ko_5           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>metabolites</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wt_4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ko_5</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe() #gives statistical summary of data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "YhI0IYtMUh8G",
        "outputId": "2a6cdb13-3f72-463b-e4ab-f832541cf85c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            wt_1       wt_2       wt_3  ...       ko_3       ko_4       ko_5\n",
              "count  89.000000  89.000000  89.000000  ...  89.000000  89.000000  89.000000\n",
              "mean    0.038937   0.040599   0.043943  ...   0.046174   0.043833   0.046540\n",
              "std     0.078364   0.094340   0.105162  ...   0.072346   0.067303   0.076133\n",
              "min     0.000600   0.000500   0.000300  ...   0.001200   0.001400   0.000120\n",
              "25%     0.004200   0.004600   0.004700  ...   0.005700   0.005100   0.005200\n",
              "50%     0.012700   0.013200   0.013900  ...   0.020000   0.019200   0.019300\n",
              "75%     0.044700   0.042900   0.040900  ...   0.056500   0.051200   0.056300\n",
              "max     0.619300   0.811100   0.924000  ...   0.471100   0.392900   0.489200\n",
              "\n",
              "[8 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb8f3c41-4bdb-4674-9655-bf54559022e9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>wt_1</th>\n",
              "      <th>wt_2</th>\n",
              "      <th>wt_3</th>\n",
              "      <th>wt_4</th>\n",
              "      <th>ko_1</th>\n",
              "      <th>ko_2</th>\n",
              "      <th>ko_3</th>\n",
              "      <th>ko_4</th>\n",
              "      <th>ko_5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>89.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.038937</td>\n",
              "      <td>0.040599</td>\n",
              "      <td>0.043943</td>\n",
              "      <td>0.039466</td>\n",
              "      <td>0.043333</td>\n",
              "      <td>0.044447</td>\n",
              "      <td>0.046174</td>\n",
              "      <td>0.043833</td>\n",
              "      <td>0.046540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.078364</td>\n",
              "      <td>0.094340</td>\n",
              "      <td>0.105162</td>\n",
              "      <td>0.091126</td>\n",
              "      <td>0.065972</td>\n",
              "      <td>0.066342</td>\n",
              "      <td>0.072346</td>\n",
              "      <td>0.067303</td>\n",
              "      <td>0.076133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000600</td>\n",
              "      <td>0.000500</td>\n",
              "      <td>0.000300</td>\n",
              "      <td>0.000400</td>\n",
              "      <td>0.000800</td>\n",
              "      <td>0.001100</td>\n",
              "      <td>0.001200</td>\n",
              "      <td>0.001400</td>\n",
              "      <td>0.000120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.004200</td>\n",
              "      <td>0.004600</td>\n",
              "      <td>0.004700</td>\n",
              "      <td>0.003900</td>\n",
              "      <td>0.004900</td>\n",
              "      <td>0.005200</td>\n",
              "      <td>0.005700</td>\n",
              "      <td>0.005100</td>\n",
              "      <td>0.005200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.012700</td>\n",
              "      <td>0.013200</td>\n",
              "      <td>0.013900</td>\n",
              "      <td>0.012300</td>\n",
              "      <td>0.020100</td>\n",
              "      <td>0.018500</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.019200</td>\n",
              "      <td>0.019300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.044700</td>\n",
              "      <td>0.042900</td>\n",
              "      <td>0.040900</td>\n",
              "      <td>0.035400</td>\n",
              "      <td>0.055900</td>\n",
              "      <td>0.050700</td>\n",
              "      <td>0.056500</td>\n",
              "      <td>0.051200</td>\n",
              "      <td>0.056300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.619300</td>\n",
              "      <td>0.811100</td>\n",
              "      <td>0.924000</td>\n",
              "      <td>0.757000</td>\n",
              "      <td>0.385800</td>\n",
              "      <td>0.381400</td>\n",
              "      <td>0.471100</td>\n",
              "      <td>0.392900</td>\n",
              "      <td>0.489200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb8f3c41-4bdb-4674-9655-bf54559022e9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb8f3c41-4bdb-4674-9655-bf54559022e9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb8f3c41-4bdb-4674-9655-bf54559022e9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c37d1d27-b31f-432e-8ca9-847e73c83116\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c37d1d27-b31f-432e-8ca9-847e73c83116')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c37d1d27-b31f-432e-8ca9-847e73c83116 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"wt_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.42659310047852,\n        \"min\": 0.0006,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.03893707865168539,\n          0.0127,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.41657340553781,\n        \"min\": 0.0005,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.04059887640449438,\n          0.0132,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.410589887933842,\n        \"min\": 0.0003,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.04394269662921348,\n          0.0139,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.41983687256307,\n        \"min\": 0.0004,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.039466292134831465,\n          0.0123,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.437371141764576,\n        \"min\": 0.0008,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.043332584269662924,\n          0.0201,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.43782620932709,\n        \"min\": 0.0011,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.04444719101123596,\n          0.0185,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.432641366264566,\n        \"min\": 0.0012,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.046174157303370794,\n          0.02,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.437172815404914,\n        \"min\": 0.0014,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.043832584269662925,\n          0.0192,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ko_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.431674718539227,\n        \"min\": 0.00012,\n        \"max\": 89.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.046539550561797746,\n          0.0193,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.plot(kind=\"hist\", bins=50, alpha=0.5, figsize=(8, 6))\n",
        "plt.title(\"Histogram of Raw Data\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "collapsed": true,
        "id": "6C4ZdrG8luVD",
        "outputId": "ac2a363b-2865-4928-828c-f8aba3e62ccf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#clean data if necessary\n",
        "df_ntsp = df[~df[\"metabolites\"].str.contains(\"TSP_d6\", case=False)] #removes the \"TSP-d6\" & all its values from the data\n",
        "df_ntsp.plot(kind=\"hist\", bins=50, alpha=0.5, figsize=(6, 4))\n",
        "plt.title(\"Histogram of Raw Data without TSP\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "a1pCIUUMXsOK",
        "outputId": "2d9cbaa4-a377-4f87-d3eb-7a4a323966ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#preprocess data\n",
        "df_log2 = np.log2(df_ntsp.iloc[:, 1:] + 0.0001) #applies log2 transformation to all columns except column one: index col\n",
        "df_log2.plot(kind=\"hist\", bins=50, alpha=0.5, figsize=(6, 4)) #plots the histogram of the log transformed data\n",
        "plt.title(\"Histogram of Log2 Transformed Data\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "BF-rRpNbr-eQ",
        "outputId": "a4691bfd-c8d2-4805-d299-6252649a04ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reference = df_log2.median(axis=1)\n",
        "quotient = df_log2.divide(reference, axis=0)\n",
        "pqn_factors = quotient.median(axis=0)\n",
        "df_pqn = df_log2.divide(pqn_factors, axis = 1)\n",
        "df_pqn.plot(kind=\"hist\", bins=50, alpha=0.5, figsize=(6, 4))\n",
        "plt.title(\"Histogram of PQN Transformed Data\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "tuPxo1Vz1CVY",
        "outputId": "5ef5e870-c041-465f-cfba-9de3ae8267bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_scaled = pd.DataFrame(StandardScaler().fit_transform(df_pqn), columns=df_pqn.columns)\n",
        "df_scaled.plot(kind=\"hist\", bins=50, alpha=0.5, figsize=(6, 4))\n",
        "plt.title(\"Histogram of Scaled Data\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "SgEIcJEJ-U-s",
        "outputId": "b5918d3c-0619-48a5-cae3-0c779fa32243"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PwvD8NjrBYes",
        "outputId": "45eedee5-dc0f-4d9d-ec4c-b64d91c02fa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        wt_1      wt_2      wt_3  ...      ko_3      ko_4      ko_5\n",
            "0   0.704146  0.641243  0.595367  ...  0.938738  0.917290  0.913496\n",
            "1  -0.554015 -0.595865 -0.643658  ... -0.660927 -0.915496 -0.856700\n",
            "2  -0.767995 -0.808095 -0.721154  ... -1.055452 -1.184318 -0.987483\n",
            "3   0.137520  0.167846  0.204537  ...  0.215724  0.320446  0.090659\n",
            "4  -0.722376 -0.620551 -0.596641  ... -0.992643 -1.054426 -1.020259\n",
            "..       ...       ...       ...  ...       ...       ...       ...\n",
            "83  1.055372  1.066204  1.191168  ...  0.195711  0.208620  0.271724\n",
            "84 -1.191242 -1.418747 -1.486460  ... -1.435214 -1.107295 -1.090903\n",
            "85 -1.631320 -0.526862 -1.580615  ... -1.523715 -1.450887 -1.388787\n",
            "86 -0.315046 -0.171305 -0.146275  ... -0.413984 -0.530901 -0.353724\n",
            "87 -1.252778 -1.304219 -1.205219  ... -1.161278 -1.247927 -1.282705\n",
            "\n",
            "[88 rows x 9 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#data analysis\n",
        "pca = PCA(n_components=2) #selects the first two components for visualisation i.e., 2D PCA\n",
        "df_pca = pd.DataFrame(pca.fit_transform(df_scaled), columns=[\"PC1\", \"PC2\"])\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.scatterplot(data=df_pca, x=\"PC1\", y=\"PC2\")\n",
        "plt.title(\"PCA Scatter Plot\")\n",
        "plt.xlabel(\"PC1\")\n",
        "plt.ylabel(\"PC2\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "I3A-vU-f-wId",
        "outputId": "798da83d-5652-474c-da12-d320a0624478"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}